@page "/page/historialventa"
@inject IVentaService _ventaServicio;
@inject IDialogService _dialogServicio;
@inject ISnackbar _snackBar;
@inject SweetAlertService Swal;
@using ClosedXML.Excel;
@inject IJSRuntime _jsServicio;



<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">
    <MudText Typo="Typo.h5" GutterBottom="true">Historial de cobros</MudText>
    <MudPaper Elevation="3" Class="pa-4" Width="100%">
        <MudGrid>
            <MudItem xs="12"></MudItem>
            <MudItem xs="12">
                <MudTable Items="@listaVentas"
                          Dense="true"
                          Striped="true" Bordered="true"
                          Loading="@_loading" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh>Fecha Registro</MudTh>
                        <MudTh>Numero Venta</MudTh>
                        <MudTh>Tipo de pago</MudTh>
                        <MudTh>Total</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="ventaRow">
                        <MudTd DataLabel="Fecha Registro">@ventaRow.FechaRegistro.Value.ToString("dd/MM/yyyy")</MudTd>
                        <MudTd DataLabel="Numero Venta">@ventaRow.NumeroDocumento</MudTd>
                        <MudTd DataLabel="Tipo de pago">@ventaRow.TipoPago</MudTd>
                        <MudTd DataLabel="Total">@ventaRow.Total</MudTd>
                        <MudTd DataLabel="">
                            <MudFab Color="Color.Primary"
                                    StartIcon="@Icons.Material.Filled.RemoveRedEye"
                                    Size="Size.Small"
                                    IconSize="Size.Small"
                                    OnClick="@(() => mostrarDetalle(ventaRow))" />
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.DataThresholding"
                           Color="Color.Success"
                           Size="Size.Medium"
                           Class="mt-1"
                           OnClick="ExportarExcel" Disabled="@desactivarBoton">Exportar Excel</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>

@code {
    List<VentaDTO> listaVentas = new List<VentaDTO>();
    private bool _loading = false;
    private bool desactivarBoton = true;

    private async Task mostrarDetalle(VentaDTO model)
    {
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parametros = new DialogParameters { ["_venta"] = model };
        var dialogo = _dialogServicio.Show<MdDetalleVenta>("Detalle venta", parametros, maxWidth);
    }

    private async Task ExportarExcel()
    {
        if (listaVentas.Any())
        {
            using (var libro = new XLWorkbook())
            {
                IXLWorksheet hoja = libro.Worksheets.Add("ventas");

                hoja.Cell(1, 1).Value = "Fecha Registro";
                hoja.Cell(1, 2).Value = "Numero Venta";
                hoja.Cell(1, 3).Value = "Tipo de pago";
                hoja.Cell(1, 4).Value = "Total";

                for (int i = 0; i < listaVentas.Count; i++)
                {
                    hoja.Cell(i + 2, 1).Value = listaVentas[i].FechaRegistro.Value.ToString("dd/MM/yyyy");
                    hoja.Cell(i + 2, 2).Value = listaVentas[i].NumeroDocumento;
                    hoja.Cell(i + 2, 3).Value = listaVentas[i].TipoPago;
                    hoja.Cell(i + 2, 4).Value = listaVentas[i].Total;
                }

                using (var memoria = new MemoryStream())
                {
                    libro.SaveAs(memoria);

                    var nombreExcel = string.Concat("HistorialVenta ", DateTime.Now.ToString("yyyyMMddHHmmss"), ".xlsx");
                    await _jsServicio.GenerarArchivo(nombreExcel, memoria.ToArray());
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Obtener la fecha actual
        var fechaHoy = DateTime.Now.ToString("dd/MM/yyyy");

        // Llamar a la función de actualización de ventas con la fecha actual
        await ActualizarListaVentas(fechaHoy);
    }

    private async Task ActualizarListaVentas(string fechaHoy)
    {
        try
        {
            Console.WriteLine("Iniciando ActualizarListaVentas");
            _loading = true;

            // Llamar al servicio con la fecha actual
            var resultado = await _ventaServicio.Historial("fecha", "", fechaHoy, fechaHoy);
            if (resultado.status)
            {
                listaVentas = (List<VentaDTO>)resultado.value!;
                Console.WriteLine($"Ventas cargadas: {listaVentas.Count}");
                desactivarBoton = false; // Habilita el botón de exportar cuando hay datos
            }
            else
            {
                listaVentas = new List<VentaDTO>();
                Console.WriteLine($"Error al cargar ventas: ");
                desactivarBoton = true; // Desactiva el botón de exportar si no hay datos
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inesperado: {ex.Message}");
        }
        finally
        {
            _loading = false;
            Console.WriteLine("Finalizando ActualizarListaVentas");
        }
    }
}
